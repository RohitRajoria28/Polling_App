029841be89c371cd9d6e17dc3dec17e2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var HomeScreen = function HomeScreen() {
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    posts = _useState2[0],
    setPosts = _useState2[1];
  var navigation = (0, _native.useNavigation)();
  (0, _react.useEffect)(function () {
    var fetchPosts = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        var response = yield _axios.default.get('https://hn.algolia.com/api/v1/search_by_date?tags=story&page=0');
        setPosts(response.data.hits);
      });
      return function fetchPosts() {
        return _ref.apply(this, arguments);
      };
    }();
    var intervalId = setInterval(fetchPosts, 10000);
    return function () {
      return clearInterval(intervalId);
    };
  }, []);
  var renderItem = function renderItem(_ref2) {
    var item = _ref2.item;
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: function onPress() {
        return navigation.navigate('Details', {
          json: item
        });
      },
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.item,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.title,
          children: item.title
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.url,
          children: item.url
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.author,
          children: item.author
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.created_at,
          children: item.created_at
        })]
      })
    });
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: posts,
      renderItem: renderItem,
      keyExtractor: function keyExtractor(item) {
        return item.objectID;
      }
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#fff'
  },
  item: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#ddd'
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8
  },
  url: {
    color: 'blue',
    marginBottom: 8
  },
  author: {
    color: '#666',
    marginBottom: 4
  },
  created_at: {
    color: '#666'
  }
});
var _default = HomeScreen;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,