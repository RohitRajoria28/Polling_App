95e2dcd382c047498eaf2812075406d5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createViewConfig = createViewConfig;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _PlatformBaseViewConfig = _interopRequireDefault(require("./PlatformBaseViewConfig"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function createViewConfig(partialViewConfig) {
  return {
    uiViewClassName: partialViewConfig.uiViewClassName,
    Commands: {},
    bubblingEventTypes: composeIndexers(_PlatformBaseViewConfig.default.bubblingEventTypes, partialViewConfig.bubblingEventTypes),
    directEventTypes: composeIndexers(_PlatformBaseViewConfig.default.directEventTypes, partialViewConfig.directEventTypes),
    validAttributes: composeIndexers(_PlatformBaseViewConfig.default.validAttributes, partialViewConfig.validAttributes)
  };
}
function composeIndexers(maybeA, maybeB) {
  var _ref;
  return maybeA == null || maybeB == null ? (_ref = maybeA != null ? maybeA : maybeB) != null ? _ref : {} : _objectSpread(_objectSpread({}, maybeA), maybeB);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGxhdGZvcm1CYXNlVmlld0NvbmZpZyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5MiIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiY3JlYXRlVmlld0NvbmZpZyIsInBhcnRpYWxWaWV3Q29uZmlnIiwidWlWaWV3Q2xhc3NOYW1lIiwiQ29tbWFuZHMiLCJidWJibGluZ0V2ZW50VHlwZXMiLCJjb21wb3NlSW5kZXhlcnMiLCJQbGF0Zm9ybUJhc2VWaWV3Q29uZmlnIiwiZGlyZWN0RXZlbnRUeXBlcyIsInZhbGlkQXR0cmlidXRlcyIsIm1heWJlQSIsIm1heWJlQiIsIl9yZWYiXSwic291cmNlcyI6WyJWaWV3Q29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7XG4gIFBhcnRpYWxWaWV3Q29uZmlnLFxuICBWaWV3Q29uZmlnLFxufSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcblxuaW1wb3J0IFBsYXRmb3JtQmFzZVZpZXdDb25maWcgZnJvbSAnLi9QbGF0Zm9ybUJhc2VWaWV3Q29uZmlnJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29tcGxldGUgYFZpZXdDb25maWdgIGZyb20gYSBgUGFydGlhbFZpZXdDb25maWdgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVmlld0NvbmZpZyhcbiAgcGFydGlhbFZpZXdDb25maWc6IFBhcnRpYWxWaWV3Q29uZmlnLFxuKTogVmlld0NvbmZpZyB7XG4gIHJldHVybiB7XG4gICAgdWlWaWV3Q2xhc3NOYW1lOiBwYXJ0aWFsVmlld0NvbmZpZy51aVZpZXdDbGFzc05hbWUsXG4gICAgQ29tbWFuZHM6IHt9LFxuICAgIGJ1YmJsaW5nRXZlbnRUeXBlczogY29tcG9zZUluZGV4ZXJzKFxuICAgICAgUGxhdGZvcm1CYXNlVmlld0NvbmZpZy5idWJibGluZ0V2ZW50VHlwZXMsXG4gICAgICBwYXJ0aWFsVmlld0NvbmZpZy5idWJibGluZ0V2ZW50VHlwZXMsXG4gICAgKSxcbiAgICBkaXJlY3RFdmVudFR5cGVzOiBjb21wb3NlSW5kZXhlcnMoXG4gICAgICBQbGF0Zm9ybUJhc2VWaWV3Q29uZmlnLmRpcmVjdEV2ZW50VHlwZXMsXG4gICAgICBwYXJ0aWFsVmlld0NvbmZpZy5kaXJlY3RFdmVudFR5cGVzLFxuICAgICksXG4gICAgdmFsaWRBdHRyaWJ1dGVzOiBjb21wb3NlSW5kZXhlcnMoXG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXSBgc3R5bGVgIHByb3BlcnR5IGNvbmZ1c2VzIEZsb3cuXG4gICAgICBQbGF0Zm9ybUJhc2VWaWV3Q29uZmlnLnZhbGlkQXR0cmlidXRlcyxcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdIGBzdHlsZWAgcHJvcGVydHkgY29uZnVzZXMgRmxvdy5cbiAgICAgIHBhcnRpYWxWaWV3Q29uZmlnLnZhbGlkQXR0cmlidXRlcyxcbiAgICApLFxuICB9O1xufVxuXG5mdW5jdGlvbiBjb21wb3NlSW5kZXhlcnM8VD4oXG4gIG1heWJlQTogP3srW3N0cmluZ106IFR9LFxuICBtYXliZUI6ID97K1tzdHJpbmddOiBUfSxcbik6IHsrW3N0cmluZ106IFR9IHtcbiAgcmV0dXJuIG1heWJlQSA9PSBudWxsIHx8IG1heWJlQiA9PSBudWxsXG4gICAgPyBtYXliZUEgPz8gbWF5YmVCID8/IHt9XG4gICAgOiB7Li4ubWF5YmVBLCAuLi5tYXliZUJ9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFlQSxJQUFBQSx1QkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQThELFNBQUFDLFFBQUFDLE1BQUEsRUFBQUMsY0FBQSxRQUFBQyxJQUFBLEdBQUFDLE1BQUEsQ0FBQUQsSUFBQSxDQUFBRixNQUFBLE9BQUFHLE1BQUEsQ0FBQUMscUJBQUEsUUFBQUMsT0FBQSxHQUFBRixNQUFBLENBQUFDLHFCQUFBLENBQUFKLE1BQUEsR0FBQUMsY0FBQSxLQUFBSSxPQUFBLEdBQUFBLE9BQUEsQ0FBQUMsTUFBQSxXQUFBQyxHQUFBLFdBQUFKLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsTUFBQSxFQUFBTyxHQUFBLEVBQUFFLFVBQUEsT0FBQVAsSUFBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsSUFBQSxFQUFBRyxPQUFBLFlBQUFILElBQUE7QUFBQSxTQUFBVSxjQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLFdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxJQUFBQyxTQUFBLENBQUFELENBQUEsUUFBQUEsQ0FBQSxPQUFBZixPQUFBLENBQUFJLE1BQUEsQ0FBQWMsTUFBQSxPQUFBQyxPQUFBLFdBQUFDLEdBQUEsUUFBQUMsZ0JBQUEsQ0FBQUMsT0FBQSxFQUFBUixNQUFBLEVBQUFNLEdBQUEsRUFBQUYsTUFBQSxDQUFBRSxHQUFBLFNBQUFoQixNQUFBLENBQUFtQix5QkFBQSxHQUFBbkIsTUFBQSxDQUFBb0IsZ0JBQUEsQ0FBQVYsTUFBQSxFQUFBVixNQUFBLENBQUFtQix5QkFBQSxDQUFBTCxNQUFBLEtBQUFsQixPQUFBLENBQUFJLE1BQUEsQ0FBQWMsTUFBQSxHQUFBQyxPQUFBLFdBQUFDLEdBQUEsSUFBQWhCLE1BQUEsQ0FBQXFCLGNBQUEsQ0FBQVgsTUFBQSxFQUFBTSxHQUFBLEVBQUFoQixNQUFBLENBQUFLLHdCQUFBLENBQUFTLE1BQUEsRUFBQUUsR0FBQSxpQkFBQU4sTUFBQTtBQUt2RCxTQUFTWSxnQkFBZ0JBLENBQzlCQyxpQkFBb0MsRUFDeEI7RUFDWixPQUFPO0lBQ0xDLGVBQWUsRUFBRUQsaUJBQWlCLENBQUNDLGVBQWU7SUFDbERDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDWkMsa0JBQWtCLEVBQUVDLGVBQWUsQ0FDakNDLCtCQUFzQixDQUFDRixrQkFBa0IsRUFDekNILGlCQUFpQixDQUFDRyxrQkFBa0IsQ0FDckM7SUFDREcsZ0JBQWdCLEVBQUVGLGVBQWUsQ0FDL0JDLCtCQUFzQixDQUFDQyxnQkFBZ0IsRUFDdkNOLGlCQUFpQixDQUFDTSxnQkFBZ0IsQ0FDbkM7SUFDREMsZUFBZSxFQUFFSCxlQUFlLENBRTlCQywrQkFBc0IsQ0FBQ0UsZUFBZSxFQUV0Q1AsaUJBQWlCLENBQUNPLGVBQWU7RUFFckMsQ0FBQztBQUNIO0FBRUEsU0FBU0gsZUFBZUEsQ0FDdEJJLE1BQXVCLEVBQ3ZCQyxNQUF1QixFQUNQO0VBQUEsSUFBQUMsSUFBQTtFQUNoQixPQUFPRixNQUFNLElBQUksSUFBSSxJQUFJQyxNQUFNLElBQUksSUFBSSxJQUFBQyxJQUFBLEdBQ25DRixNQUFNLFdBQU5BLE1BQU0sR0FBSUMsTUFBTSxZQUFBQyxJQUFBLEdBQUksQ0FBQyxDQUFDLEdBQUF4QixhQUFBLENBQUFBLGFBQUEsS0FDbEJzQixNQUFNLEdBQUtDLE1BQU0sQ0FBQztBQUM1QiJ9